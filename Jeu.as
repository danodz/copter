package  {	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.events.Event;	import flash.ui.Mouse;		public class Jeu extends Sprite	{		public var copter : Copter;				private var mur : Mur;		private var murs : Array;		private var murCompteur : int;		private var murHauteur : Number = 75;		private var murVel : Number = 0;				private var piece : Piece;		private var pieceCompteur : int = 0;				public var pointage : Number = 0;				private var pointageTxt : TextField;		public function Jeu() 		{			murs = new Array();						Mouse.hide();						copter = new Copter();			copter.x = 150;			copter.y = 200;			addChild(copter);						//le pointage qui s'affiche durant la partie			pointageTxt = new TextField();			pointageTxt.x = 25;			pointageTxt.y = 25;			pointageTxt.width = 300;			pointageTxt.defaultTextFormat = new TextFormat('Verdana',40);			addChild(pointageTxt);		}				//gère la création des murs		public function murUpdate()		{			murCompteur += 1;						if(murCompteur % 3 == 0)			{				//les murs de plafond et de plancher				murVel += Math.random() * 2 - 1;								if(murVel < -2)					murVel = -2;				else if(murVel > 2)					murVel = 2;								if(murHauteur < 20)					murVel = Math.abs(murVel);				else if(murHauteur > 115)					murVel *= -1;								murHauteur += murVel;								mur = new Mur(550, 0, murHauteur);				addChild(mur);				murs[murs.length] = mur;								mur = new Mur(550, murHauteur + 250,  150);				addChild(mur);				murs[murs.length] = mur;								//les murs qui se trouve dans le chemin				if(murCompteur >= 40)				{					mur = new Mur(550, Math.random() * (murHauteur/2 + 125) + murHauteur, 85);					addChild(mur);					murs[murs.length] = mur;										murCompteur = 0;				}			}		}				public function update()		{			copter.update();						//création des pièces qui donne des points			if(pieceCompteur > 70 && Math.random() > 0.98)			{				piece = new Piece(Math.random() * (murHauteur/2 + 125) + murHauteur);				addChild(piece);				pieceCompteur = 0;			}			pieceCompteur += 1;						//le pointage			pointage += 0.04;			pointageTxt.text = String(Math.round(pointage));			setChildIndex(pointageTxt, numChildren - 1);						//vérification de collision avec le mur et les pièces			for(var i : int; i < numChildren - 1; i++)			{				//mur				if(getChildAt(i) is Mur)				{					(getChildAt(i) as Mur).update();					if(copter.hitTestObject(getChildAt(i)))					{						mort();					}										if( (getChildAt(i) as Mur).retirer)					{						removeChildAt(i);					}				}								//pièces				if(getChildAt(i) is Piece)				{					(getChildAt(i) as Piece).update();										if((getChildAt(i) as Piece).hitTestObject(copter))					{						pointage += 10;						Mur.couleur += 1;												piece.removeEventListener(Event.ENTER_FRAME, update);						removeChild((getChildAt(i) as Piece));					}				}			}		}		//lorsque le "copter" touche un mur		private function mort()		{			Mur.couleur = 1;						for(var i : int; i < numChildren; i++)			{				removeChildAt(i);			}						(parent as Application).allerEcranTitre();		}	}}